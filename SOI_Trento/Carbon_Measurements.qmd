---
title: "Carbon microdosimetry"
format: html
execute:
  echo: false
  warning: false
editor: visual
---

## Carbon microdosimetry @MedAustron

```{r}
library(stringr)
library(gridExtra)
library(maptools)
library(ggplot2)
library(ggalt)
library(ggthemes)
library(tibble)
library(viridis)
library(knitr)
library(plotly)
library(egg)
library(ggpubr)
library(GillespieSSA)
library(MASS)
library(rgl)
library(zoo)
library(Sim.DiffProc)
library(doParallel)
library(ggsci)
library(deSolve)
library(pracma)
library(diffeqr)
library(parallel)
library(tidymodels)
library(data.table)
library(glue)

# source("G:\\Other computers\\Il mio laptop\\Francesco\\Universit√†\\Articoli\\Marta\\GSM2\\Dose Rate\\Code\\utilities_doserate.R")

theme_set(theme_bw()+theme(plot.title = element_text(size=20, color="black"),
                           axis.title.x = element_text(size=20, color="black"),
                           axis.title.y = element_text(size=20, color="black"),
                           axis.text.x = element_text(size=20, color="black"),
                           axis.text.y = element_text(size=20, color="black"),
                           legend.title = element_blank(),
                           legend.text = element_text(size=20, color="black")))

cb_a <- c("#0072B2","#000000","#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
cb_b <- c("#000000", "#E69F00", "#0072B2", "#6A3D9A" , "#009E73", "#F0E442", "#56B4E9", "#D55E00", "#CC79A7")
cb_c <- c( "#56B4E9", "#009E73", "#0072B2", "#D55E00", "#CC79A7")

cb_nob <- c("#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
c25 <- c(
  "dodgerblue2", "#E31A1C", # red
  "green4",
  "#6A3D9A", # purple
  "#FF7F00", # orange
  "black", "gold1",
  "skyblue2", "#FB9A99", # lt pink
  "palegreen2",
  "#CAB2D6", # lt purple
  "#FDBF6F", # lt orange
  "gray70", "khaki2",
  "maroon", "orchid1", "deeppink1", "blue1", "steelblue4",
  "darkturquoise", "green1", "yellow4", "yellow3",
  "darkorange4", "brown"
)
```

```{r}
compute_calibration_adc <- function(m, df_count, bin, mv){

  y <- m*df_count$mv
  
  df_y<-data.frame(y = y, counts = df_count$count)
  
  count_h<-c()
  y_h<-c()
  for (b in 1:(length(bin)-1)) {
    count_h[b] <- sum(df_y$counts[(df_y$y > bin[b]) & (df_y$y <= bin[b+1])])
    y_h[b]<-(bin[b]+bin[b+1])/2
  }
  
  fy_h <- data.frame(y = y_h, fy = count_h)
  
  return(fy_h)
}

compute_spectra <- function(fy_h, bin){
  
  hist <- fy_h %>% 
    mutate(BinWidth = diff(bin))
  
  hist$fy_bw <- hist$fy/hist$BinWidth
  
  B <- 1/diff(log10(hist$BinWidth))[1]
  
  # B<-1/0.05
  C <- log(10)*diff(log10(hist$BinWidth))[1]
  
  hist$fy_bw_norm <- hist$fy_bw/(C*sum(hist$y*hist$fy_bw))
  # hist$fy_norm <- (hist$counts)/(C*sum(hist$y*hist$count))
  
  hist$yfy <- hist$fy_bw_norm*hist$y
  
  hist$yfy_norm <- hist$yfy/(C*sum(hist$y*hist$yfy))
  
  hist$ydy <- hist$yfy_norm*hist$y
  
  hist_M <- fy_h %>% 
    mutate(BinWidth = diff(bin))
  
  hist_M$fy_bw<-hist_M$fy/hist_M$BinWidth
  hist_M$fy_bw_norm<-hist_M$fy_bw/(C*sum(hist_M$y*hist_M$fy))
  
  hist_M$yfy<-hist_M$fy_bw*hist_M$y
  hist_M$yfy_norm<-hist_M$yfy/(C*sum(hist_M$y*hist_M$yfy))
  hist_M$ydy<-hist_M$fy_bw*hist_M$y*hist_M$y
  
  #yF value
  yF<-sum(hist_M$BinWidth*hist_M$yfy)/sum(hist_M$BinWidth*hist_M$fy_bw)
  
  #yD value
  yD<-sum(hist_M$BinWidth*hist_M$ydy)/sum(hist_M$BinWidth*hist_M$yfy)
  
  y0<-(150)^2
  
  ystar<-(y0*sum(((1-exp(-(hist$y^2)/(y0)))*hist$BinWidth*hist$fy_bw)))/(yF*sum(hist$BinWidth*hist$fy_bw))
  
  return(list(histogram = hist, yF = yF, yD = yD, ystar = ystar))
}

select_gain <- function(ion, gain){
  
  if(ion == "H"){
    if(gain == "M"){
      m <- 0.46
    }else if(gain == "L"){
      m <- 0.444
    }else if(gain == "C"){
      m <- 0.866
    }else{
      return(-1)
    }
  }else if(ion == "C"){
    if(gain == "M"){
      m <- 0.866
    }else if(gain == "L"){
      m <- 0.866
    }else{
      return(-1)
    }
  }
  
  return(m)
}
```

```{r}
medium <- read.csv(file = "silicon_linearization_med_gain_C.csv")
low <- read.csv(file = "silicon_linearization_low_gain_C.csv")
```

```{r}
ion <- "C"
cut <- 30
bin<-10^(seq(log10(1),log10(10000),length.out=100))

list_files <- list.files("MedAustron/",pattern = ".Spe")

path <- glue("MedAustron/",list_files[1])
df <- fread(path)

split <- str_split(list_files[1],pattern = "_")[[1]]

if(sum(grepl("med",str_split(list_files[1],pattern = "_")[[1]])) == 1){
  gain <- "M"
  mv <- medium
}else if(sum(grepl("low",str_split(list_files[1],pattern = "_")[[1]])) == 1){
  gain <- "L"
  mv <- low
}else{
  return(-1)
}

m <- select_gain(ion, gain)

count <- as.numeric(df$`$SPEC_ID:`[12:4107]) %>% 
  as.data.frame() %>% 
  mutate(mv = mv$INPUT..mV.)
count <- count %>% 
  mutate(channel = 1:nrow(count))
colnames(count)[1] <- "count"
count$count2 <- count$count*count$channel^2
# count$Type <- list_files[1]
count$Type <- "1"

count$count[which(count$channel < cut)] <- 0

fy_h <- compute_calibration_adc(m, count, bin, mv)

df_plot <- data.frame(y = fy_h$y, fy = fy_h$fy)

spectra <- compute_spectra(fy_h, bin)$histogram %>% 
  mutate(Type = "1")

glue("1 - {list_files[1]}")


ctr <- 2
  
for (file in list_files[-1]) {
  glue("{ctr} - {file}") %>% print()
  
  path <- glue("MedAustron/",file)
  df <- fread(path)
  
  split <- str_split(file, pattern = "_")[[1]]

  if(sum(grepl("med",str_split(file, pattern = "_")[[1]])) == 1){
    gain <- "M"
    mv <- medium
  }else if(sum(grepl("low",str_split(file, pattern = "_")[[1]])) == 1){
    gain <- "L"
    mv <- low
  }else{
    return(-1)
  }

  m <- select_gain(ion, gain)
  
  count <- as.numeric(df$`$SPEC_ID:`[12:4107]) %>% 
    as.data.frame() %>% 
  mutate(mv = mv$INPUT..mV.)
  
  count <- count %>% 
    mutate(channel = 1:nrow(count))
    colnames(count)[1] <- "count"
    count$count2 <- count$count*count$channel^2
    count$Type <- as.character(ctr)
  
  count$count[which(count$channel < cut)] <- 0
  
  fy_h <- compute_calibration_adc(m, count, bin, mv)
  
  df_plot <- data.frame(y = fy_h$y, fy = fy_h$fy)
  
  spectra_ <- compute_spectra(fy_h, bin)$histogram %>% 
    mutate(Type = as.character(ctr))
  
  ctr <- ctr + 1
  
  spectra <- rbind(spectra, spectra_)
}

spectra$Type <- factor(spectra$Type, 
                       levels = c("1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20"))


```

```{r}
p_spec <- spectra %>% 
  ggplot(aes(y, ydy, color = Type)) + 
  geom_step(linewidth = 1) +
  # scale_x_log10(breaks = trans_breaks("log10", function(x) 10^x),
  #   labels = trans_format("log10", math_format(10^.x))) + 
  scale_x_log10() +
  scale_color_manual(values = c25) +
  ylab("yd(y)")
ggplotly(p_spec)
```
